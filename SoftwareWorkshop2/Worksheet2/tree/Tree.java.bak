package tree;

/**
 * @author Uday Reddy, with changes by Manfred Kerber
 * @version 2013-12-05 based on Uday's version of 2012
 *
 * Tree class defines a recursive type called Tree (for Binary Trees), and
 * provides constructor and getter methods.
 */

public class Tree {

	/**
	 * Tree class defines a recursive type called Tree, and provides
	 * constructor and accessor methods.
	 */
	private boolean empty;
	private int value;
	private Tree left, right;

	protected final int height;

	/**
	 * Creates a new Tree whose root value is x and left and right
	 * subtrees are r and l
	 */
	public Tree(int value, Tree left, Tree right) {
		this.empty = false;
		this.value = value;
		this.left = left;
		this.right = right;

		int maxHeight = Math.max(
				this.left.getHeight(), this.right.getHeight());

		this.height = maxHeight + 1;
	}

	/**
	 * Creates an empty tree
	 */
	public Tree() {
		this.empty = true;
		this.height = -1;
	}

	public int getHeight() {
		return height;
	}
	/**
	 * returns true if this tree is empty (eg nil)
	 */
	public boolean getEmpty() {
		return empty;
	}

	/**
	 * gets the root value of this tree
	 */
	public int getValue() {
		if (getEmpty()) {
			throw new IllegalStateException(
					"Trying to access root of an empty tree");
		}
		return value;
	}

	/**
	 * gets the left subtree of this node
	 */
	public Tree getLeft() {
		if (getEmpty()) {
			throw new IllegalStateException(
					"Trying to access subtree of an empty tree");
		}
		return left;
	}

	/**
	 * gets the right subtree of this node
	 */
	public Tree getRight() {
		if (getEmpty()) {
			throw new IllegalStateException(
					"Trying to access subtree of an empty tree");
		}
		return right;
	}

	@Override public String toString() {
	return toStringAux(0);
	}

	public String toStringAux(int n) {
	if (getEmpty()) {
		return Bar(n) + "emptyTree";
	} else {
		return String.format("%s%d\n%s\n%s",
				 Bar(n), this.getValue(),
				 this.getLeft().toStringAux(n+1),
				 this.getRight().toStringAux(n+1));
	}
	}

	public String Bar(int n) {
	StringBuilder result = new StringBuilder();
	for (int i = 0; i < n; i++) {
		result.insert(i, '|');
	}
	return result.toString();
	}

	public final static Tree emptyTree = new Tree();

	public String toDot() {
	String result = "digraph g {\n";
	result += toDotAux("t");
	return result + "}";
	}

	private String toDotAux(String s) {
	String result = "";
	if (getEmpty()) {
		return result;
	} else {
		result += s + " [label=\"" + this.getValue() + "\"]\n";
		if (this.getLeft().getEmpty() && !this.getRight().getEmpty()) {
		result += s + "->" + s + "l [style=\"invis\"]\n";
		result += s + "l" + " [style=\"invis\"]\n";
		result += s + "->" + s + "r\n";
		result += this.getRight().toDotAux(s+"r");
		} else if (this.getRight().getEmpty() && !this.getLeft().getEmpty()) {
		result += s + "->" + s + "l\n";
		result += this.getLeft().toDotAux(s+"l");
		result += s + "->" + s + "r [style=\"invis\"]\n";
		result += s + "r" + " [style=\"invis\"]\n";
		} else if (!this.getRight().getEmpty() && !this.getLeft().getEmpty()) {
		result += s + "->" + s + "l\n";
		result += this.getLeft().toDotAux(s+"l");
		result += s + "->" + s + "r\n";
		result += this.getRight().toDotAux(s+"r");

		}
	}
	return result;
	}

	public static Tree makeCompleteTree(int level) {
	return makeCompleteTreeAux(level, 1);
	}

	private static Tree makeCompleteTreeAux(int level, int nextNodeNumber) {
	if (level == 0) {
		return new Tree(nextNodeNumber, emptyTree, emptyTree);
	} else {
		return new Tree(nextNodeNumber,
				makeCompleteTreeAux(level-1, nextNodeNumber+1),
				makeCompleteTreeAux(level-1, nextNodeNumber +
						(int) Math.round(Math.pow(2, level))));
	}
	}

}
